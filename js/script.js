// S√©lection des √©l√©ments HTML du jeu
var boardElement = document.querySelector("#board"); // Conteneur pour les √©l√©ments du jeu
var scoreElement = document.getElementById("score"); // √âl√©ment affichant le score
var liveElement = document.getElementById("lives"); // √âl√©ment affichant les vies restantes
var timerElement = document.getElementById("timer"); // √âl√©ment affichant le temps restant

// Variables pour suivre l'√©tat du jeu
var i = 0; // Compteur pour les identifiants des t√™tes
var score = 0; // Score du joueur
var lives = 3; // Nombre de vies restantes
var timerDuration = 90; // Dur√©e du jeu en secondes
var creationInterval = 2000; // Intervalle de temps en millisecondes entre la cr√©ation des t√™tes
var frequencyIncreaseInterval = 10000; // Intervalle de temps en millisecondes pour augmenter la fr√©quence de cr√©ation des t√™tes
var scoreThreshold = 5; // Seuil de score pour augmenter la fr√©quence de cr√©ation des t√™tes
var currentThreshold = 0; // Seuil actuel pour augmenter la difficult√©
var isGameRunning = true; // Indique si le jeu est en cours
var gameTimer; // Timer du jeu
var createTeteInterval; // Intervalle pour la cr√©ation des t√™tes

// Fonction pour obtenir un entier al√©atoire entre 0 et max (exclus)
function getRandomInt(max) {
    return Math.floor(Math.random() * max); // Renvoie un entier al√©atoire entre 0 et max - 1
}

// Fonction pour cr√©er une nouvelle t√™te et l'ajouter au plateau
function createTete() {
    if (!isGameRunning || !boardElement) return; // Si le jeu est termin√© ou l'√©l√©ment board n'existe pas, ne rien faire

    var teteElement = document.createElement("img"); // Cr√©e un nouvel √©l√©ment image
    var isBonus = Math.random() < 0.1; // 10% de chance de cr√©er une t√™te bonus
    var isMalus = Math.random() < 0.1; // 10% de chance de cr√©er une t√™te malus

    // D√©finir la source et la classe de l'image en fonction du type de t√™te
    if (isBonus) {
        teteElement.src = "../happy/autre/bonus.png"; // Source pour les t√™tes bonus
        teteElement.classList.add("tete-bonus");
    } else if (isMalus) {
        teteElement.src = "../happy/autre/malus.png"; // Source pour les t√™tes malus
        teteElement.classList.add("tete-malus");
    } else {
        teteElement.src = "../happy/" + getRandomInt(11) + ".png"; // Source pour les t√™tes normales
        teteElement.classList.add("tete");
    }

    teteElement.id = i; // Assigne un identifiant unique √† la t√™te
    teteElement.setAttribute("onclick", `clickOnTete(${i}, ${isBonus}, ${isMalus})`); // D√©finit la fonction √† appeler au clic
    i++; // Incr√©mente le compteur d'identifiant

    // Positionner la t√™te en bas de l'√©cran
    teteElement.style.left = (getRandomInt(1032) + 8) + "px"; // Position horizontale al√©atoire
    teteElement.style.bottom = "0px"; // Positionner au bas de l'√©cran

    // Appliquer une animation de mont√©e
    var timeRand = getRandomInt(4) + 3; // Dur√©e de l'animation entre 3 et 7 secondes
    teteElement.style.animation = `tete-qui-monte ${timeRand}s linear`; // Applique l'animation de mont√©e

    boardElement.appendChild(teteElement); // Ajoute la t√™te au conteneur du jeu

    // Supprimer la t√™te apr√®s un certain temps
    var time = setTimeout(() => {
        if (isGameRunning) { // Si le jeu est encore en cours
            if (!teteElement.classList.contains("tete-malus")) { // Ne pas retirer de vie si c'est une t√™te malus
                boardElement.removeChild(teteElement); // Supprime la t√™te du conteneur
                lives--; // R√©duit le nombre de vies
                if (liveElement) {
                    liveElement.textContent = "ü§ç".repeat(lives); // Met √† jour l'affichage des vies
                }
                if (lives <= 0) {
                    endGame(false); // Fin du jeu en cas de perte de toutes les vies
                }
            } else {
                boardElement.removeChild(teteElement); // Supprime la t√™te malus
            }
        }
    }, timeRand * 1000); // La t√™te est supprim√©e apr√®s la dur√©e de l'animation
}

// Fonction pour g√©rer le clic sur une t√™te
function clickOnTete(index, isBonus, isMalus) {
    var tete = document.getElementById(index); // R√©cup√®re la t√™te cliqu√©e par son identifiant
    if (tete) {
        if (isBonus) {
            // Traitement pour les t√™tes bonus
            score += 5; // Ajoute des points pour une t√™te bonus
            if (scoreElement) {
                scoreElement.textContent = score; // Met √† jour l'affichage du score
            }
            tete.src = "../sad/autre/bonus.png"; // Change l'image en version triste de la t√™te bonus
        } else if (isMalus) {
            // Traitement pour les t√™tes malus
            score -= 3; // Retire des points pour une t√™te malus
            if (scoreElement) {
                scoreElement.textContent = score; // Met √† jour l'affichage du score
            }
            tete.src = "../sad/autre/malus.png"; // Change l'image en version triste de la t√™te malus
        } else {
            if (tete.src.includes("happy")) {
                tete.src = tete.src.replace("happy", "sad"); // Change l'image en version triste pour une t√™te normale
                score++; // Ajoute un point pour une t√™te normale
                if (scoreElement) {
                    scoreElement.textContent = score; // Met √† jour l'affichage du score
                }
                updateDifficulty(); // Met √† jour la difficult√© en fonction du score
            }
        }
        var tmp = tete.getBoundingClientRect().top; // R√©cup√®re la position verticale actuelle de la t√™te
        tete.style.animation = "none"; // Retire l'animation en cours
        tete.style.top = tmp + "px"; // Conserve la position verticale
        tete.style.animation = "tete-qui-floute 1s linear"; // Applique une animation de floutage
        setTimeout(function () {
            tete.remove(); // Supprime la t√™te apr√®s l'animation
        }, 1000); // D√©lai avant la suppression
    }
}

// Fonction pour mettre √† jour le chronom√®tre
function updateTimer() {
    if (timerDuration <= 0) {
        endGame(true); // Fin du jeu si le temps est √©coul√©
        return;
    }
    timerDuration--; // R√©duit la dur√©e du chronom√®tre de 1 seconde
    if (timerElement) {
        timerElement.textContent = timerDuration; // Met √† jour l'affichage du temps restant
    }
}

// Fonction pour terminer le jeu
function endGame(isTimeUp) {
    isGameRunning = false; // Marque le jeu comme termin√©
    clearInterval(gameTimer); // Arr√™te le chronom√®tre du jeu

    if (isTimeUp) {
        alert("Le temps est √©coul√© ! Votre score final est " + score); // Alerte de fin du jeu en cas de temps √©coul√©
    } else {
        alert("Vous avez perdu toutes vos vies ! Votre score final est " + score); // Alerte de fin du jeu en cas de perte de vies
    }

    window.location = "../page/over.html"; // Redirection vers la page de fin de jeu
}

// Fonction pour augmenter la fr√©quence de cr√©ation des t√™tes
function increaseFrequency() {
    if (creationInterval > 500) { // Assure que l'intervalle de cr√©ation n'est pas inf√©rieur √† 500 ms
        creationInterval -= 250; // R√©duit l'intervalle de cr√©ation des t√™tes
        // Met √† jour l'intervalle de cr√©ation des t√™tes
        clearInterval(createTeteInterval); // Arr√™te l'ancien intervalle de cr√©ation
        createTeteInterval = setInterval(createTete, creationInterval); // D√©finit le nouvel intervalle de cr√©ation
    }
}

// Fonction pour configurer la difficult√©
function setupDifficulty() {
    // Augmente la fr√©quence des t√™tes toutes les 10 secondes
    setInterval(increaseFrequency, frequencyIncreaseInterval);
}

// Fonction pour mettre √† jour la difficult√© en fonction du score
function updateDifficulty() {
    if (score >= currentThreshold + scoreThreshold) {
        increaseFrequency(); // Augmente la fr√©quence des t√™tes si le score atteint le seuil
        currentThreshold = score; // Met √† jour le seuil actuel
    }
}

// Fonction pour initialiser les contr√¥les audio
function setupAudioControls() {
    const audioElement = document.getElementById('background-audio'); // √âl√©ment audio
    const playButton = document.getElementById('play-button'); // Bouton pour jouer le son
    const pauseButton = document.getElementById('pause-button'); // Bouton pour mettre le son en pause

    if (audioElement) {
        // Assurer que le fichier audio est charg√©
        audioElement.addEventListener('canplay', () => {
            console.log('Le fichier audio est charg√© et pr√™t √† jouer.'); // Log lorsque le fichier audio est pr√™t
        });

        // Fonction pour jouer le son
        function playAudio() {
            audioElement.play().catch(e => {
                console.log('Erreur lors de la lecture du son :', e); // Log en cas d'erreur de lecture
            });
        }

        // Fonction pour mettre le son en pause
        function pauseAudio() {
            audioElement.pause();
        }

        // Ajouter des √©couteurs d'√©v√©nements pour les boutons
        if (playButton) {
            playButton.addEventListener('click', playAudio); // Joue le son au clic sur le bouton de lecture
        }
        if (pauseButton) {
            pauseButton.addEventListener('click', pauseAudio); // Met le son en pause au clic sur le bouton de pause
        }

        // Lire le son d√®s que la page est charg√©e
        playAudio(); // D√©marre la lecture du son d√®s le chargement de la page
    }
}

// V√©rifier si les √©l√©ments du jeu sont pr√©sents avant de d√©marrer
document.addEventListener("DOMContentLoaded", function () {
    if (boardElement) {
        // D√©marrer le chronom√®tre
        gameTimer = setInterval(updateTimer, 1000); // Met √† jour le chronom√®tre toutes les secondes

        // Mettre en place l'augmentation de la difficult√©
        setupDifficulty();

        // Cr√©er des t√™tes √† un intervalle qui peut changer
        createTeteInterval = setInterval(createTete, creationInterval); // Cr√©e des t√™tes √† l'intervalle d√©fini
    }

    // Initialiser les contr√¥les audio si les √©l√©ments audio sont pr√©sents
    setupAudioControls();
});
